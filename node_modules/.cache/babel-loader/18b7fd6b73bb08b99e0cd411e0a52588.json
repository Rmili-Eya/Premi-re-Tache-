{"ast":null,"code":"export const isEmail = email => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email);\n};\n/**\n * Chek if vatiable is empty\n * @prop String thing\n * @returns Boolean\n */\n\nexport const isEmpty = thing => {\n  let empty = false;\n\n  switch (typeof thing) {\n    case 'undefined':\n      empty = true;\n      break;\n\n    case 'string':\n      if (thing.trim().length === 0) {\n        empty = true;\n      }\n\n      break;\n\n    case 'object':\n      if (thing === null) {\n        empty = true;\n      } else if (Object.keys(thing).length === 0) {\n        empty = true;\n      }\n\n      break;\n\n    default:\n      empty = true;\n  }\n\n  return empty;\n};\n/**\n * Check length of the string greater than\n * @prop String|Integer str\n * @prop boolean|options.trim Trim input before validating\n * @prop number|options.lt Check if length less than lt\n * @prop number|options.lte Check if length is less than or equals to lte\n * @prop number|options.gt Check if length is greater than gt\n * @prop number|options.gte Check if length is greater than or equals to gte\n * @returns Boolean\n */\n\nexport const isLength = (str, options) => {\n  if (isEmpty(options)) {\n    throw new Error(\"Who will provide the options you?\");\n  }\n\n  let isValid = true;\n\n  if (['string', 'number'].indexOf(typeof str) === -1) {\n    isValid = false;\n  } else {\n    // Convert to string incase it's number\n    let len = 0;\n\n    if (options.trim) {\n      len = str.toString().trim().length;\n    } else {\n      len = str.toString().length;\n    }\n\n    if (typeof options.lt === 'number' && len >= options.lt) {\n      isValid = false;\n    } else if (typeof options.lte === 'number' && len > options.lte) {\n      isValid = false;\n    } else if (typeof options.gt === 'number' && len <= options.gt) {\n      isValid = false;\n    } else if (typeof options.gte === 'number' && len < options.gte) {\n      isValid = false;\n    }\n  }\n\n  return isValid;\n};\n/**\n * Check if string contains whitespaces\n * @prop String str\n * @returns Boolean\n */\n\nexport const isContainWhiteSpace = str => {\n  if (typeof str === 'string' || typeof str === 'number') {\n    return str.toString().trim().indexOf(' ') !== -1;\n  } else {\n    return false;\n  }\n};","map":{"version":3,"sources":["/home/eya/Téléchargements/Expery/src/components/validator.js"],"names":["isEmail","email","re","test","isEmpty","thing","empty","trim","length","Object","keys","isLength","str","options","Error","isValid","indexOf","len","toString","lt","lte","gt","gte","isContainWhiteSpace"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAIC,KAAD,IAAW;AAC9B,QAAMC,EAAE,GAAG,uJAAX;AACA,SAAOA,EAAE,CAACC,IAAH,CAAQF,KAAR,CAAP;AACH,CAHM;AAKP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,OAAO,GAAIC,KAAD,IAAW;AAC9B,MAAIC,KAAK,GAAG,KAAZ;;AAEA,UAAQ,OAAOD,KAAf;AACI,SAAK,WAAL;AACIC,MAAAA,KAAK,GAAG,IAAR;AACA;;AACJ,SAAK,QAAL;AACI,UAAID,KAAK,CAACE,IAAN,GAAaC,MAAb,KAAwB,CAA5B,EAA+B;AAC3BF,QAAAA,KAAK,GAAG,IAAR;AACH;;AACD;;AACJ,SAAK,QAAL;AACI,UAAID,KAAK,KAAK,IAAd,EAAoB;AAChBC,QAAAA,KAAK,GAAG,IAAR;AACH,OAFD,MAEO,IAAIG,MAAM,CAACC,IAAP,CAAYL,KAAZ,EAAmBG,MAAnB,KAA8B,CAAlC,EAAqC;AACxCF,QAAAA,KAAK,GAAG,IAAR;AACH;;AACD;;AACJ;AACIA,MAAAA,KAAK,GAAG,IAAR;AAjBR;;AAoBA,SAAOA,KAAP;AACH,CAxBM;AA0BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMK,QAAQ,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAEtC,MAAIT,OAAO,CAACS,OAAD,CAAX,EAAsB;AAClB,UAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACH;;AAED,MAAIC,OAAO,GAAG,IAAd;;AAEA,MAAI,CAAC,QAAD,EAAW,QAAX,EAAqBC,OAArB,CAA6B,OAAOJ,GAApC,MAA6C,CAAC,CAAlD,EAAqD;AACjDG,IAAAA,OAAO,GAAG,KAAV;AACH,GAFD,MAEO;AACH;AACA,QAAIE,GAAG,GAAG,CAAV;;AAEA,QAAIJ,OAAO,CAACN,IAAZ,EAAkB;AACdU,MAAAA,GAAG,GAAGL,GAAG,CAACM,QAAJ,GAAeX,IAAf,GAAsBC,MAA5B;AACH,KAFD,MAEO;AACHS,MAAAA,GAAG,GAAGL,GAAG,CAACM,QAAJ,GAAeV,MAArB;AACH;;AAED,QAAI,OAAOK,OAAO,CAACM,EAAf,KAAsB,QAAtB,IAAkCF,GAAG,IAAIJ,OAAO,CAACM,EAArD,EAAyD;AACrDJ,MAAAA,OAAO,GAAG,KAAV;AACH,KAFD,MAEO,IAAI,OAAOF,OAAO,CAACO,GAAf,KAAuB,QAAvB,IAAmCH,GAAG,GAAGJ,OAAO,CAACO,GAArD,EAA0D;AAC7DL,MAAAA,OAAO,GAAG,KAAV;AACH,KAFM,MAEA,IAAI,OAAOF,OAAO,CAACQ,EAAf,KAAsB,QAAtB,IAAkCJ,GAAG,IAAIJ,OAAO,CAACQ,EAArD,EAAyD;AAC5DN,MAAAA,OAAO,GAAG,KAAV;AACH,KAFM,MAEA,IAAI,OAAOF,OAAO,CAACS,GAAf,KAAuB,QAAvB,IAAmCL,GAAG,GAAGJ,OAAO,CAACS,GAArD,EAA0D;AAC7DP,MAAAA,OAAO,GAAG,KAAV;AACH;AACJ;;AAED,SAAOA,OAAP;AACH,CAhCM;AAkCP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMQ,mBAAmB,GAAIX,GAAD,IAAS;AAExC,MAAI,OAAOA,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,QAA9C,EAAwD;AACpD,WAAOA,GAAG,CAACM,QAAJ,GAAeX,IAAf,GAAsBS,OAAtB,CAA8B,GAA9B,MAAuC,CAAC,CAA/C;AACH,GAFD,MAEO;AACH,WAAO,KAAP;AACH;AACJ,CAPM","sourcesContent":["export const isEmail = (email) => {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}\n\n/**\n * Chek if vatiable is empty\n * @prop String thing\n * @returns Boolean\n */\nexport const isEmpty = (thing) => {\n    let empty = false;\n\n    switch (typeof thing) {\n        case 'undefined':\n            empty = true;\n            break;\n        case 'string':\n            if (thing.trim().length === 0) {\n                empty = true;\n            }\n            break;\n        case 'object':\n            if (thing === null) {\n                empty = true;\n            } else if (Object.keys(thing).length === 0) {\n                empty = true;\n            }\n            break;\n        default:\n            empty = true;\n    }\n\n    return empty;\n}\n\n/**\n * Check length of the string greater than\n * @prop String|Integer str\n * @prop boolean|options.trim Trim input before validating\n * @prop number|options.lt Check if length less than lt\n * @prop number|options.lte Check if length is less than or equals to lte\n * @prop number|options.gt Check if length is greater than gt\n * @prop number|options.gte Check if length is greater than or equals to gte\n * @returns Boolean\n */\nexport const isLength = (str, options) => {\n\n    if (isEmpty(options)) {\n        throw new Error(\"Who will provide the options you?\")\n    }\n\n    let isValid = true;\n\n    if (['string', 'number'].indexOf(typeof str) === -1) {\n        isValid = false;\n    } else {\n        // Convert to string incase it's number\n        let len = 0;\n\n        if (options.trim) {\n            len = str.toString().trim().length;\n        } else {\n            len = str.toString().length;\n        }\n\n        if (typeof options.lt === 'number' && len >= options.lt) {\n            isValid = false;\n        } else if (typeof options.lte === 'number' && len > options.lte) {\n            isValid = false;\n        } else if (typeof options.gt === 'number' && len <= options.gt) {\n            isValid = false;\n        } else if (typeof options.gte === 'number' && len < options.gte) {\n            isValid = false;\n        }\n    }\n\n    return isValid;\n}\n\n/**\n * Check if string contains whitespaces\n * @prop String str\n * @returns Boolean\n */\nexport const isContainWhiteSpace = (str) => {\n\n    if (typeof str === 'string' || typeof str === 'number') {\n        return str.toString().trim().indexOf(' ') !== -1;\n    } else {\n        return false;\n    }\n}"]},"metadata":{},"sourceType":"module"}