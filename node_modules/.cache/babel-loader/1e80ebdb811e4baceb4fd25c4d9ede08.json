{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/eya/T\\xE9l\\xE9chargements/Expery/src/components/Login.js\";\nimport React, { Component } from \"react\";\nimport { Row, FormGroup, FormControl, Button } from 'react-bootstrap';\nimport { isEmail, isEmpty, isLength, isContainWhiteSpace } from '../components/validator';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      const value = target.value;\n      const name = target.name;\n      let {\n        formData\n      } = this.state;\n      formData[name] = value;\n      this.setState({\n        formData: formData\n      });\n    };\n\n    this.validateLoginForm = e => {\n      let errors = {};\n      const {\n        formData\n      } = this.state;\n\n      if (isEmpty(formData.email)) {\n        errors.email = \"Email can't be blank\";\n      } else if (!isEmail(formData.email)) {\n        errors.email = \"Please enter a valid email\";\n      }\n\n      if (isEmpty(formData.password)) {\n        errors.password = \"Password can't be blank\";\n      } else if (isContainWhiteSpace(formData.password)) {\n        errors.password = \"Password should not contain white spaces\";\n      } else if (!isLength(formData.password, {\n        gte: 6,\n        lte: 16,\n        trim: true\n      })) {\n        errors.password = \"Password's length must between 6 to 16\";\n      }\n\n      if (isEmpty(errors)) {\n        return true;\n      } else {\n        return errors;\n      }\n    };\n\n    this.login = e => {\n      e.preventDefault();\n      let errors = this.validateLoginForm();\n\n      if (errors === true) {\n        alert(\"You are successfully signed in...\");\n        window.location.reload();\n      } else {\n        this.setState({\n          errors: errors,\n          formSubmitted: true\n        });\n      }\n    };\n\n    this.state = {\n      formData: {},\n      // Contains login form data\n      errors: {},\n      // Contains login field errors\n      formSubmitted: false,\n      // Indicates submit status of login form\n      loading: false // Indicates in progress state of login form\n\n    };\n  }\n\n  render() {\n    const {\n      errors,\n      formSubmitted\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Login\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.login,\n        children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n          controlId: \"email\",\n          validationState: formSubmitted ? errors.email ? 'error' : 'success' : null,\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            type: \"text\",\n            className: \"sign\",\n            name: \"email\",\n            placeholder: \"Enter your email\",\n            onChange: this.handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }, this), errors.email && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-danger\",\n            children: errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 38\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n          controlId: \"password\",\n          validationState: formSubmitted ? errors.password ? 'error' : 'success' : null,\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            type: \"password\",\n            className: \"sign\",\n            name: \"password\",\n            placeholder: \"Enter your password\",\n            onChange: this.handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }, this), errors.password && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-danger\",\n            children: errors.password\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          bsStyle: \"primary\",\n          className: \"submitt\",\n          children: \"Sign In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Login;\n/*import React from 'react'\nimport {useState} from 'react';\nimport {Form, Row, Col, InputGroup, Button } from 'react-bootstrap';\nfunction Login() {\n    const [validated, setValidated] = useState(false);\n  \n    const handleSubmit = (event) => {\n      const form = event.currentTarget;\n      if (form.checkValidity() === false) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n  \n      setValidated(true);\n    };\n  \n    return (\n      <Form noValidate validated={validated} onSubmit={handleSubmit}>\n        <Form>\n          <Form.Group  controlId=\"validationCustom01\">\n            <Form.Control\n              required\n              type=\"email\"\n              placeholder=\"Email\"\n              \n            />\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group  controlId=\"validationCustomUsername\">\n            <InputGroup>\n\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Username\"\n                aria-describedby=\"inputGroupPrepend\"\n                required\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Please choose a username.\n              </Form.Control.Feedback>\n            </InputGroup>\n          </Form.Group>\n        </Form>\n\n        <Form.Group>\n          <Form.Check\n            required\n\n            feedback=\"You must agree before submitting.\"\n          />\n        </Form.Group>\n        <Button type=\"submit\">Submit form</Button>\n      </Form>\n    );\n  }\n  \n\nexport default Login*/","map":{"version":3,"sources":["/home/eya/Téléchargements/Expery/src/components/Login.js"],"names":["React","Component","Row","FormGroup","FormControl","Button","isEmail","isEmpty","isLength","isContainWhiteSpace","Login","constructor","props","handleInputChange","event","target","value","name","formData","state","setState","validateLoginForm","e","errors","email","password","gte","lte","trim","login","preventDefault","alert","window","location","reload","formSubmitted","loading","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Row, FormGroup, FormControl, Button } from 'react-bootstrap';\n\nimport { isEmail, isEmpty, isLength, isContainWhiteSpace } from '../components/validator';\n\nclass Login extends Component { \n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            formData: {}, // Contains login form data\n            errors: {}, // Contains login field errors\n            formSubmitted: false, // Indicates submit status of login form\n            loading: false // Indicates in progress state of login form\n        }\n    }\n\n    handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        let { formData } = this.state;\n        formData[name] = value;\n\n        this.setState({\n            formData: formData\n        });\n    }\n\n    validateLoginForm = (e) => {\n\n        let errors = {};\n        const { formData } = this.state;\n\n        if (isEmpty(formData.email)) {\n            errors.email = \"Email can't be blank\";\n        } else if (!isEmail(formData.email)) {\n            errors.email = \"Please enter a valid email\";\n        }\n\n        if (isEmpty(formData.password)) {\n            errors.password = \"Password can't be blank\";\n        }  else if (isContainWhiteSpace(formData.password)) {\n            errors.password = \"Password should not contain white spaces\";\n        } else if (!isLength(formData.password, { gte: 6, lte: 16, trim: true })) {  \n            errors.password = \"Password's length must between 6 to 16\";\n        }\n\n        if (isEmpty(errors)) {\n            return true;\n        } else {\n            return errors;\n        }\n    }\n\n    login = (e) => {\n\n        e.preventDefault();\n\n        let errors = this.validateLoginForm();\n\n        if(errors === true){\n            alert(\"You are successfully signed in...\");\n            window.location.reload()\n        } else {\n            this.setState({\n                errors: errors,\n                formSubmitted: true\n            });\n        }\n    }\n\n    render() {\n\n        const { errors, formSubmitted } = this.state;\n\n        return (\n            <div className=\"Login\">\n                <form onSubmit={this.login}>\n          \n                  <FormGroup controlId=\"email\" validationState={formSubmitted ? (errors.email ? 'error' : 'success') : null}>\n                    <FormControl type=\"text\" className='sign' name=\"email\" placeholder=\"Enter your email\" onChange={this.handleInputChange} />\n                    {errors.email && <span className=\"text-danger\">{errors.email}</span>}\n                  </FormGroup>\n\n                  <FormGroup controlId=\"password\" validationState={formSubmitted ? (errors.password ? 'error' : 'success') : null}>\n                    <FormControl type=\"password\" className='sign' name=\"password\" placeholder=\"Enter your password\" onChange={this.handleInputChange} />\n                    {errors.password && <span className=\"text-danger\">{errors.password}</span>}\n                  </FormGroup>\n\n                  <Button type=\"submit\" bsStyle=\"primary\" className='submitt'>Sign In</Button>\n                </form>\n            </div>\n          )\n    }\n}\n\nexport default Login;\n\n\n\n\n\n\n\n\n\n\n\n\n/*import React from 'react'\nimport {useState} from 'react';\nimport {Form, Row, Col, InputGroup, Button } from 'react-bootstrap';\nfunction Login() {\n    const [validated, setValidated] = useState(false);\n  \n    const handleSubmit = (event) => {\n      const form = event.currentTarget;\n      if (form.checkValidity() === false) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n  \n      setValidated(true);\n    };\n  \n    return (\n      <Form noValidate validated={validated} onSubmit={handleSubmit}>\n        <Form>\n          <Form.Group  controlId=\"validationCustom01\">\n            <Form.Control\n              required\n              type=\"email\"\n              placeholder=\"Email\"\n              \n            />\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group  controlId=\"validationCustomUsername\">\n            <InputGroup>\n\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Username\"\n                aria-describedby=\"inputGroupPrepend\"\n                required\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Please choose a username.\n              </Form.Control.Feedback>\n            </InputGroup>\n          </Form.Group>\n        </Form>\n\n        <Form.Group>\n          <Form.Check\n            required\n\n            feedback=\"You must agree before submitting.\"\n          />\n        </Form.Group>\n        <Button type=\"submit\">Submit form</Button>\n      </Form>\n    );\n  }\n  \n\nexport default Login*/\n\n\n\n"]},"metadata":{},"sourceType":"module"}